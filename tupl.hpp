//  Copyright (c) 2023 Lemurian Labs https://lemurianlabs.com/
//
//  Distributed under the Boost Software License, Version 1.0.
//        http://www.boost.org/LICENSE_1_0.txt
//
//  Repo: https://github.com/Lemurian-Labs/tupl

#ifndef LML_TUPL_HPP
#define LML_TUPL_HPP
/*
  tupl<T...>
  ==========
  tupl is a C++20 tuple type implemented as struct specializations
  for a variadic number of members T... (up to 16 members as provided).

  Depends on <concepts> for assignable_from, ranges::swap CPO, etc.
  Depends on <compare> for three-way operator <=> comparisons, etc.
  Depends on <cstdint> for uintptr_t etc.

  Depends on lml c_array_support project for generic support of array
             assignment and comparison, alongside other regular types.

  Depends on IREPEAT preprocessor library of for repetitive codegen
             (an optional dependency, only needed to do codegen).
*/
#include "tupl_platform.hpp" // #define platform specific macros
                             // also #include'd at end to #undef all
#include "tupl_traits.hpp"   // #includes "array_assign.hpp", required
#include "array_compare.hpp" // C array comparison support is required

#include "namespace.hpp"

// The header "tupl_impl.hpp" as provided is limited to 'arity' 16.
// If tupl_dev/tupl_impl.hpp exists then is included instead.
//
#ifdef TUPL_IMPL_PREPROCESS // Force preprocessing pass
#include "tupl_dev/tupl_impl.pp"
#elif defined __has_include
# if __has_include("tupl_impl.hpp")
#include "tupl_impl.hpp"
# endif
#else
#include "tupl_dev/tupl_impl.hpp"
#endif

#include "namespace.hpp"
/*
  DO NOT EDIT the file 'tupl_impl.hpp'.
  The implementation in tupl_impl.hpp is generated by preprocessing
  the file tupl_dev/tupl_impl.pp; edit this if you need to.
  If more members are needed then follow instructions in tupl_dev
  to generate a file tupl_dev/tupl_impl.hpp
*/
#include "tupl_platform.hpp" // #undef platform macros UNREACHABLE, NUA

#endif
