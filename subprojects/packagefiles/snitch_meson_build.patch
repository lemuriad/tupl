diff --git a/include/snitch/snitch_config.hpp.config b/include/snitch/snitch_config.hpp.config
index 6f9dac9..99ea37a 100644
--- a/include/snitch/snitch_config.hpp.config
+++ b/include/snitch/snitch_config.hpp.config
@@ -40,19 +40,19 @@
 #    define SNITCH_MAX_COMMAND_LINE_ARGS ${SNITCH_MAX_COMMAND_LINE_ARGS}
 #endif
 #if !defined(SNITCH_DEFINE_MAIN)
-#    cmakedefine01 SNITCH_DEFINE_MAIN
+#cmakedefine01 SNITCH_DEFINE_MAIN
 #endif
 #if !defined(SNITCH_WITH_EXCEPTIONS)
-#    cmakedefine01 SNITCH_WITH_EXCEPTIONS
+#cmakedefine01 SNITCH_WITH_EXCEPTIONS
 #endif
 #if !defined(SNITCH_WITH_TIMINGS)
-#    cmakedefine01 SNITCH_WITH_TIMINGS
+#cmakedefine01 SNITCH_WITH_TIMINGS
 #endif
 #if !defined(SNITCH_WITH_SHORTHAND_MACROS)
-#    cmakedefine01 SNITCH_WITH_SHORTHAND_MACROS
+#cmakedefine01 SNITCH_WITH_SHORTHAND_MACROS
 #endif
 #if !defined(SNITCH_DEFAULT_WITH_COLOR)
-#    cmakedefine01 SNITCH_DEFAULT_WITH_COLOR
+#cmakedefine01 SNITCH_DEFAULT_WITH_COLOR
 #endif
 // clang-format on
 
diff --git a/meson.build b/meson.build
new file mode 100644
index 0000000..49b1451
--- /dev/null
+++ b/meson.build
@@ -0,0 +1,48 @@
+project('snitch', 'cpp',
+  default_options : ['cpp_std=c++20', 'default_library=static'],
+  version : '1.0.0'
+)
+
+include_dirs = include_directories('.','include')
+
+headers = files('include/snitch/snitch.hpp',
+                'include/snitch/snitch_teamcity.hpp')
+
+main = files('src/snitch.cpp')
+
+make_snitch_all = files('make_snitch_all.py')
+
+subdir('snitch')
+
+install_headers(headers, subdir: 'snitch')
+
+if get_option('create_library')
+
+  snitch = library('snitch',
+    conf_file, main, headers,
+    include_directories: include_dirs,
+    install: true,
+    cpp_args: snitch_config_cpp_args,
+  )
+
+  snitch_dep = declare_dependency(
+    link_with: snitch,
+    include_directories : include_dirs
+  )
+
+  import('pkgconfig').generate(
+    snitch,
+    filebase: 'snitch',
+    description: 'Lightweight C++20 testing framework.',
+    url: 'https://github.com/cschreib/snitch',
+  )
+
+else
+
+  snitch_dep = declare_dependency(include_directories : include_dirs)
+
+endif
+
+if meson.version().version_compare('>=0.54.0')
+  meson.override_dependency('snitch', snitch_dep)
+endif
diff --git a/meson_options.txt b/meson_options.txt
new file mode 100644
index 0000000..9e1146a
--- /dev/null
+++ b/meson_options.txt
@@ -0,0 +1,18 @@
+option('max_test_cases'        ,type: 'integer' ,value: 5000, description : 'Maximum number of test cases in a test application.')
+option('max_nested_sections'   ,type: 'integer' ,value: 8   , description : 'Maximum depth of nested sections in a test case.')
+option('max_expr_length'       ,type: 'integer' ,value: 1024, description : 'Maximum length of a printed expression when reporting failure.')
+option('max_message_length'    ,type: 'integer' ,value: 1024, description : 'Maximum length of error or status messages.')
+option('max_test_name_length'  ,type: 'integer' ,value: 1024, description : 'Maximum length of a test case name.')
+option('max_tag_length'        ,type: 'integer' ,value: 256 , description : 'Maximum length of a test tag.')
+option('max_captures'          ,type: 'integer' ,value: 8   , description : 'Maximum number of captured expressions in a test case.')
+option('max_capture_length'    ,type: 'integer' ,value: 256 , description : 'Maximum length of a captured expression.')
+option('max_unique_tags'       ,type: 'integer' ,value: 1024, description : 'Maximum number of unique tags in a test application.')
+option('max_command_line_args' ,type: 'integer' ,value: 1024, description : 'Maximum number of command line arguments to a test application.')
+
+option('define_main'           ,type: 'boolean' ,value: true, description : 'Define main() in snitch -- disable to provide your own main() function.')
+option('with_exceptions'       ,type: 'boolean' ,value: true, description : 'Use exceptions in snitch implementation -- will be forced OFF if exceptions are not available.')
+option('with_timings'          ,type: 'boolean' ,value: true, description : 'Measure the time taken by each test case -- disable to speed up tests.')
+option('with_shorthand_macros' ,type: 'boolean' ,value: true, description : 'Use short names for test macros -- disable if this causes conflicts.')
+option('default_with_color'    ,type: 'boolean' ,value: true, description : 'Enable terminal colors by default -- can also be controlled by command line interface.')
+option('create_header_only'    ,type: 'boolean' ,value: true, description : 'Create a single-header header-only version of snitch.')
+option('create_library'        ,type: 'boolean' ,value: true, description : 'Build a compiled library version of snitch.')
diff --git a/snitch/meson.build b/snitch/meson.build
new file mode 100644
index 0000000..b8c96be
--- /dev/null
+++ b/snitch/meson.build
@@ -0,0 +1,70 @@
+version = meson.project_version()
+vers = version.split('.')
+
+git_hash = run_command(find_program('git'),'log','-1','--format=%h'
+                      ,check:true).stdout().strip()
+
+conf_data = configuration_data({
+  'PROJECT_VERSION' : version,
+  'PROJECT_VERSION_MAJOR' : vers[0],
+  'PROJECT_VERSION_MINOR' : vers[1],
+  'PROJECT_VERSION_PATCH' : vers[2],
+
+  'SNITCH_FULL_VERSION' : version + '.' + git_hash,
+
+  'SNITCH_MAX_TEST_CASES'        : get_option('max_test_cases'),
+  'SNITCH_MAX_NESTED_SECTIONS'   : get_option('max_nested_sections'),
+  'SNITCH_MAX_EXPR_LENGTH'       : get_option('max_expr_length'),
+  'SNITCH_MAX_MESSAGE_LENGTH'    : get_option('max_message_length'),
+  'SNITCH_MAX_TEST_NAME_LENGTH'  : get_option('max_test_name_length'),
+  'SNITCH_MAX_TAG_LENGTH'        : get_option('max_tag_length'),
+  'SNITCH_MAX_CAPTURES'          : get_option('max_captures'),
+  'SNITCH_MAX_CAPTURE_LENGTH'    : get_option('max_capture_length'),
+  'SNITCH_MAX_UNIQUE_TAGS'       : get_option('max_unique_tags'),
+  'SNITCH_MAX_COMMAND_LINE_ARGS' : get_option('max_command_line_args'),
+
+  'SNITCH_DEFINE_MAIN'           : get_option('define_main').to_int(),
+  'SNITCH_WITH_EXCEPTIONS'       : get_option('with_exceptions').to_int(),
+  'SNITCH_WITH_TIMINGS'          : get_option('with_timings').to_int(),
+  'SNITCH_WITH_SHORTHAND_MACROS' : get_option('with_shorthand_macros').to_int(),
+  'SNITCH_DEFAULT_WITH_COLOR'    : get_option('default_with_color').to_int(),
+  'SNITCH_CREATE_HEADER_ONLY'    : get_option('create_header_only').to_int(),
+  'SNITCH_CREATE_LIBRARY'        : get_option('create_library').to_int(),
+})
+
+conf_file = configure_file(
+  input: meson.project_source_root() / 'include/snitch/snitch_config.hpp.config',
+  output: 'snitch_config.hpp',
+  format: 'cmake',
+  configuration: conf_data,
+  install_dir: 'include/snitch'
+)
+
+snitch_config_cpp_args = [
+  '-DSNITCH_MAX_TEST_CASES='        + conf_data.get('SNITCH_MAX_TEST_CASES').to_string(),
+  '-DSNITCH_MAX_NESTED_SECTIONS='   + conf_data.get('SNITCH_MAX_NESTED_SECTIONS').to_string(),
+  '-DSNITCH_MAX_EXPR_LENGTH='       + conf_data.get('SNITCH_MAX_EXPR_LENGTH').to_string(),
+  '-DSNITCH_MAX_MESSAGE_LENGTH='    + conf_data.get('SNITCH_MAX_MESSAGE_LENGTH').to_string(),
+  '-DSNITCH_MAX_TEST_NAME_LENGTH='  + conf_data.get('SNITCH_MAX_TEST_NAME_LENGTH').to_string(),
+  '-DSNITCH_MAX_TAG_LENGTH='        + conf_data.get('SNITCH_MAX_TAG_LENGTH').to_string(),
+
+  '-DSNITCH_MAX_UNIQUE_TAGS='       + conf_data.get('SNITCH_MAX_UNIQUE_TAGS').to_string(),
+  '-DSNITCH_MAX_COMMAND_LINE_ARGS=' + conf_data.get('SNITCH_MAX_COMMAND_LINE_ARGS').to_string(),
+
+  '-DSNITCH_DEFINE_MAIN='           + conf_data.get('SNITCH_DEFINE_MAIN').to_string(),
+  '-DSNITCH_WITH_EXCEPTIONS='       + conf_data.get('SNITCH_WITH_EXCEPTIONS').to_string(),
+  '-DSNITCH_WITH_TIMINGS='          + conf_data.get('SNITCH_WITH_TIMINGS').to_string(),
+  '-DSNITCH_WITH_SHORTHAND_MACROS=' + conf_data.get('SNITCH_WITH_SHORTHAND_MACROS').to_string(),
+  '-DSNITCH_DEFAULT_WITH_COLOR='    + conf_data.get('SNITCH_DEFAULT_WITH_COLOR').to_string(),
+]
+
+snitch_all = custom_target(
+  output: 'snitch_all.hpp',
+  build_by_default: get_option('create_header_only'),
+  depend_files : [conf_file, headers, main],
+  command: [find_program('python3'), make_snitch_all,
+            meson.project_source_root(), meson.project_build_root()],
+  depfile: 'snitch_all.d',
+  install: true,
+  install_dir: 'include/snitch'
+)
