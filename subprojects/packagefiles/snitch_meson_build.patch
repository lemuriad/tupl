diff --git a/include/snitch/meson.build b/include/snitch/meson.build
new file mode 100644
index 0000000..526756b
--- /dev/null
+++ b/include/snitch/meson.build
@@ -0,0 +1,7 @@
+conf_file = configure_file(
+  input: 'snitch_config.hpp.config',
+  output: 'snitch_config.hpp',
+  format: 'cmake',
+  configuration: conf_data,
+  install_dir: 'include/snitch'
+)
diff --git a/meson.build b/meson.build
new file mode 100644
index 0000000..892aa1a
--- /dev/null
+++ b/meson.build
@@ -0,0 +1,103 @@
+project('snitch', 'cpp',
+  default_options : ['cpp_std=c++20'],
+  meson_version : '>=1.0.0',
+  version : '1.0.0'
+)
+
+version = meson.project_version()
+vers = version.split('.')
+
+conf_data = configuration_data()
+
+conf_data.set('PROJECT_VERSION', version)
+conf_data.set('PROJECT_VERSION_MAJOR', vers[0])
+conf_data.set('PROJECT_VERSION_MINOR', vers[1])
+conf_data.set('PROJECT_VERSION_PATCH', vers[2])
+
+git_hash = run_command(find_program('git'),'log','-1','--format=%h'
+                      ,check:true).stdout().strip()
+conf_data.set('SNITCH_FULL_VERSION', version + '.' + git_hash)
+
+conf_data.set('SNITCH_MAX_TEST_CASES'         ,5000, description : 'Maximum number of test cases in a test application.')
+conf_data.set('SNITCH_MAX_NESTED_SECTIONS'    ,8   , description : 'Maximum depth of nested sections in a test case.')
+conf_data.set('SNITCH_MAX_EXPR_LENGTH'        ,1024, description : 'Maximum length of a printed expression when reporting failure.')
+conf_data.set('SNITCH_MAX_MESSAGE_LENGTH'     ,1024, description : 'Maximum length of error or status messages.')
+conf_data.set('SNITCH_MAX_TEST_NAME_LENGTH'   ,1024, description : 'Maximum length of a test case name.')
+conf_data.set('SNITCH_MAX_TAG_LENGTH'         ,256 , description : 'Maximum length of a test tag.')
+conf_data.set('SNITCH_MAX_CAPTURES'           ,8   , description : 'Maximum number of captured expressions in a test case.')
+conf_data.set('SNITCH_MAX_CAPTURE_LENGTH'     ,256 , description : 'Maximum length of a captured expression.')
+conf_data.set('SNITCH_MAX_UNIQUE_TAGS'        ,1024, description : 'Maximum number of unique tags in a test application.')
+conf_data.set('SNITCH_MAX_COMMAND_LINE_ARGS'  ,1024, description : 'Maximum number of command line arguments to a test application.')
+conf_data.set10('SNITCH_DEFINE_MAIN'          ,true, description : 'Define main() in snitch -- disable to provide your own main() function.')
+conf_data.set10('SNITCH_WITH_EXCEPTIONS'      ,true, description : 'Use exceptions in snitch implementation -- will be forced OFF if exceptions are not available.')
+conf_data.set10('SNITCH_WITH_TIMINGS'         ,true, description : 'Measure the time taken by each test case -- disable to speed up tests.')
+conf_data.set10('SNITCH_WITH_SHORTHAND_MACROS',true, description : 'Use short names for test macros -- disable if this causes conflicts.')
+conf_data.set10('SNITCH_DEFAULT_WITH_COLOR'   ,true, description : 'Enable terminal colors by default -- can also be controlled by command line interface.')
+conf_data.set10('SNITCH_CREATE_HEADER_ONLY'   ,true, description : 'Create a single-header header-only version of snitch.')
+conf_data.set10('SNITCH_CREATE_LIBRARY'       ,true, description : 'Build a compiled library version of snitch.')
+
+subdir('include/snitch')
+
+headers = files(
+  'include/snitch/snitch.hpp',
+  'include/snitch/snitch_teamcity.hpp'
+)
+
+install_headers(headers, subdir: 'snitch')
+
+if get_option('create_library').allowed()
+
+  pkg = import('pkgconfig')
+
+  snitch = library('snitch',
+    conf_file, 'src/snitch.cpp', 'include/snitch/snitch_teamcity.hpp',
+    #ependencies : conf_file,
+    include_directories: 'include',
+    install: true,
+  )
+
+  snitch_dep = declare_dependency(
+    #dependencies : conf_file,
+    link_with: snitch,
+    include_directories : include_directories('include')
+  )
+
+  pkg.generate(
+    snitch,
+    filebase: 'snitch',
+    description: 'Lightweight C++20 testing framework.',
+    url: 'https://github.com/cschreib/snitch',
+  )
+
+else
+
+  snitch_dep = declare_dependency(
+    #dependencies : conf_file,
+    include_directories : include_directories('include')
+  )
+
+endif
+
+if get_option('create_header_only').allowed()
+
+  python = import('python').find_installation('python3')
+
+  snitch_single_header = custom_target(
+    #input: ,
+    output: 'snitch_all.hpp',
+    depend_files : [conf_file, headers, 'src/snitch.cpp'],
+    command: [python, 'make_snitch_all.py'],
+    depfile: 'snitch_single_header.d',
+    install_dir: 'include/snitch',
+  )
+
+  snitch_single_header_dep = declare_dependency(
+    include_directories : include_directories('.')
+  )
+
+endif
+
+# tests are disabled by default when used as a subproject
+if get_option('tests').disable_auto_if(meson.is_subproject()).allowed()
+subdir('tests')
+endif
diff --git a/meson_options.txt b/meson_options.txt
new file mode 100644
index 0000000..c5c4766
--- /dev/null
+++ b/meson_options.txt
@@ -0,0 +1,8 @@
+option('tests', type : 'feature', value : 'auto',
+  description : 'Tests  -- auto-disabled if a subproject')
+
+option('create_header_only', type : 'feature', value : 'auto',
+  description : 'Create a single-header header-only version of snitch.')
+
+option('create_library', type : 'feature', value : 'auto',
+  description : 'Build a compiled library version of snitch.')
diff --git a/tests/meson.builld b/tests/meson.builld
new file mode 100644
index 0000000..2b196bd
--- /dev/null
+++ b/tests/meson.builld
@@ -0,0 +1 @@
+# placeholder for test targets under meson
\ No newline at end of file
